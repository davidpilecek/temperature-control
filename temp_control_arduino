/*
  The circuit:
   LCD RS pin to digital pin 12
   LCD Enable pin to digital pin 11
   LCD D4 pin to digital pin 5
   LCD D5 pin to digital pin 4
   LCD D6 pin to digital pin 3
   LCD D7 pin to digital pin 2
   LCD R/W pin to ground
   LCD VSS pin to ground
   LCD VCC pin to 5V
   10K resistor:
   ends to +5V and ground
   wiper to LCD VO pin (pin 3)
   switch A0
   button1 D8
   button2 D9
   led1 D7
*/
#include <OneWire.h>
#include <DallasTemperature.h>
#include <LiquidCrystal.h>

//define custom characters for display
byte degree[8] = {
  0b00110,
  0b01001,
  0b01001,
  0b00110,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};

byte thermometer[8] = {
  0b00100,
  0b01010,
  0b01010,
  0b01110,
  0b01110,
  0b11111,
  0b11111,
  0b01110,
};

byte arrow[] = {
  B00100,
  B01110,
  B11111,
  B01110,
  B01110,
  B11111,
  B01110,
  B00100
};


//define upper and lower bounds for hysteresis and its value
bool hu = false;
bool hl = true;
const byte hystereze = 1;

//define inputs
const byte plus = 8;
const byte minus = 9;
const byte fine = A0;


//define temperature related variables
float tempC;
float tempSet = 85;
int tempF;
int tempSetF;

//define outputs
const byte ledUp = 7;
const byte ledDown = LED_BUILTIN;

//timer variables
unsigned long currMillis;

//button debounce variables

bool buttonState;             // the current reading from the input pin
bool lastButtonState = LOW;

bool buttonState2;            // the current reading from the input pin
bool lastButtonState2 = LOW;

float count;

// the previous reading from the input pin
unsigned long lastDebounceTime = 0;
unsigned long lastDebounceTime2 = 0;

// the last time the output pin was toggled
const byte debounceDelay = 3;

// Data wire is plugged into digital pin 2 on the Arduino
#define ONE_WIRE_BUS 6

// Setup a oneWire instance to communicate with any OneWire device
OneWire oneWire(ONE_WIRE_BUS);

// Pass oneWire reference to DallasTemperature library
DallasTemperature sensors(&oneWire);


// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);



void setup(void)
{

  //create custom characters to be displayed
  lcd.createChar(1, thermometer);
  lcd.createChar(0, degree);
  lcd.createChar(3, arrow);

  pinMode(ledDown, OUTPUT);
  pinMode(ledUp, OUTPUT);
  pinMode(plus, INPUT);
  pinMode(minus, INPUT);
  pinMode(fine, INPUT);

  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);

  sensors.begin();  // Start up the library
  Serial.begin(9600);
}

void loop(void)
{
  //initiate counting of elapsed time
  currMillis = millis();

  //read button state
  bool reading = digitalRead(plus);
  bool reading2 = digitalRead(minus);

  // Send the command to get temperatures
  sensors.requestTemperatures();

  sensors.setResolution(10);

  tempC = sensors.getTempCByIndex(0);

  tempF = (tempC + 32) * 9 / 5;
  //tempF = round(tempF);
  tempSetF = (tempSet + 32) * 9 / 5;
  //tempSetF = round(tempSetF);
  //print the temperature in Celsius

  //write all values onto display
  lcd.home();
  lcd.write((uint8_t)1);
  lcd.setCursor(1, 0);
  lcd.print(" :");
  lcd.setCursor(3, 0);
  lcd.print(tempC);
  
  lcd.write((uint8_t)0);
  lcd.print("C/");
  lcd.print(tempF);
  
  lcd.write((uint8_t)0);
  lcd.print("F");
  
  lcd.setCursor(0, 1);
  lcd.write((uint8_t)1);
  lcd.write((uint8_t)3);
  lcd.print(":");
  lcd.print(tempSet);
  lcd.write((uint8_t)0);
  lcd.print("C/");
  lcd.print(tempSetF);

  lcd.write((uint8_t)0);
  lcd.print("F");

  Serial.println(tempC);

  //change increment based on user
  if (digitalRead(fine))  count = 0.1;

  else count = 1;


  //if button state changes
  // reset the debouncing timer

  if (reading != lastButtonState) lastDebounceTime = millis();

  if ((millis() - lastDebounceTime) > debounceDelay) {

    if (reading != buttonState) {
      buttonState = reading;


      if (buttonState) tempSet += count;

    }

  }

  // reset the debouncing timer
  if (reading2 != lastButtonState2) lastDebounceTime2 = millis();


  if ((millis() - lastDebounceTime2) > debounceDelay) {
    // whatever the reading is at, it's been there for longer
    // than the debounce delay, so take it as the actual current state:

    // if the button state has changed:
    if (reading2 != buttonState2) {
      buttonState2 = reading2;

      // only toggle if the new button state is HIGH
      if (buttonState2 == HIGH) tempSet -= count;
    }
  }

  //if output is off and temperature exceeds desired value, turn on
  if (hl == true && tempC >= tempSet)
  {

    digitalWrite(ledUp, 1);
    digitalWrite(ledDown, !digitalRead(ledUp));

    hl = false;

  }
  //if value exceeds upper bound of hysteresis,
  //stay on and let program know
  //this happened
  else if ((hl == false || digitalRead(ledUp) == HIGH ) && tempC >= (tempSet + hystereze))
  {

    digitalWrite(ledUp, 1);
    digitalWrite(ledDown, !digitalRead(ledUp));

    hu = true;


  }
  //if value exceeded upper bound of hysteresis (previous if statement),
  // turn off at set value
  else if (hu == true && tempC <= tempSet)
  {
    digitalWrite(ledUp, 0);
    digitalWrite(ledDown, !digitalRead(ledUp));

    hu = false;
  }
  //if value didn't exceed hysteresis (stayed close to set value),
  //turn off at lower bound of hysteresis, so not to cause flickering
  else if (hu == false && tempC <= (tempSet - hystereze))
  {
    digitalWrite(ledUp, 0);
    digitalWrite(ledDown, !digitalRead(ledUp));

    hl = true;
  }

  //reset last state of button
  lastButtonState = reading;
  lastButtonState2 = reading2;
}
